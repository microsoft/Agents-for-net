// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Microsoft.Agents.Hosting.A2A.Protocol;

/// <summary>
/// Message sender's role.
/// </summary>
[JsonConverter(typeof(KebabCaseLowerJsonStringEnumConverter<MessageRole>))]
public enum MessageRole
{
    /// <summary>
    /// User role.
    /// </summary>
    User,
    /// <summary>
    /// Agent role.
    /// </summary>
    Agent
}

/// <summary>
/// JSON converter for MessageRole enum.
/// </summary>
public sealed class MessageRoleConverter : JsonConverter<MessageRole>
{
    /// <inheritdoc />
    public override MessageRole Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        return value switch
        {
            "user" => MessageRole.User,
            "agent" => MessageRole.Agent,
            _ => throw new JsonException($"Unknown message role: {value}")
        };
    }

    /// <inheritdoc />
    public override void Write(Utf8JsonWriter writer, MessageRole value, JsonSerializerOptions options)
    {
        var role = value switch
        {
            MessageRole.User => "user",
            MessageRole.Agent => "agent",
            _ => throw new JsonException($"Unknown message role: {value}")
        };
        writer.WriteStringValue(role);
    }
}
/// <summary>
/// Represents a single communication turn or a piece of contextual information between a 
/// client and an agent. Messages are used for instructions, prompts, replies, and status updates.
/// </summary>
public sealed class Message
{
    [JsonPropertyName("kind")]
    public string Kind { get; } = "message";

    /// <summary>
    /// Indicates the sender: "user" (from A2A Client) or "agent" (from A2A Server).
    /// </summary>
    [JsonPropertyName("role")]
    public required MessageRole Role { get; set; }

    /// <summary>
    /// Array of content parts. Must contain at least one part.
    /// </summary>
    [JsonPropertyName("parts")]
    public required ImmutableArray<Part> Parts { get; set; }

    /// <summary>
    /// Message identifier generated by the message sender
    /// </summary>
    [JsonPropertyName("messageId")]
    public required string MessageId { get; set; }

    /// <summary>
    /// Task identifier the current message is related to
    /// </summary>
    [JsonPropertyName("taskId")]
    public string? TaskId { get; set; }

    /// <summary>
    /// Context identifier the message is associated with
    /// </summary>
    [JsonPropertyName("contextId")]
    public string? ContextId { get; set; }

    /// <summary>
    /// Arbitrary key-value metadata associated with this message.
    /// </summary>
    [JsonPropertyName("metadata")]
    public IReadOnlyDictionary<string, object>? Metadata { get; set; }

    /// <summary>
    /// List of tasks referenced as contextual hint by this message.
    /// </summary>
    [JsonPropertyName("referenceTaskIds")]
    public ImmutableArray<string>? ReferenceTaskIds { get; set; }

    /// <summary>
    /// The URIs of extensions that are relevant to this message.
    /// </summary>
    [JsonPropertyName("extensions")]
    public ImmutableArray<string>? Extensions { get; set; }
}