// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using Microsoft.Agents.Core.Serialization.Converters;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text.Json.Nodes;
using System.Text.Json.Serialization;

namespace Microsoft.Agents.Core.Models
{
    /// <summary>
    /// The AI Citations Entity.
    /// </summary>
    public class AIEntity : Entity
    {
        public AIEntity() : base("https://schema.org/Message") {}

        // document this property
        /// <summary>
        /// The AdditionalType value to indicate AI generated content.
        /// </summary>
        public const string AdditionalTypeAIGeneratedContent = "AIGeneratedContent";  //TODO: add localized versions for other languages

        /// <summary>
        /// Required. Must be "Message".
        /// </summary>
        [JsonPropertyName("@type")]
        public string AtType { get; set; } = "Message";

        /// <summary>
        /// Required. Must be "https://schema.org"
        /// </summary>
        [JsonPropertyName("@context")]
        public string AtContext { get; set; } = "https://schema.org";

        /// <summary>
        /// Must be left blank.
        /// </summary>
        [JsonPropertyName("@id")]
        public string AtId { get; set; } = "";

        /// <summary>
        /// Indicate that the content was generated by AI.
        /// </summary>
        public IList<string> AdditionalType { get; set; } = [];

        /// <summary>
        /// Optional. If the citation object is included, then the sent activity will include citations that are referenced in the activity text.
        /// </summary>
        public IList<ClientCitation> Citation { get; set; } = [];

        /// <summary>
        /// Optional sensitivity content information.
        /// </summary>
        public SensitivityUsageInfo? UsageInfo { get; set; }
    }

    /// <summary>
    /// The client citation.
    /// </summary>
    public class ClientCitation
    {
        private const int MaxTitleLength = 80;
        private const int MaxAbstractTextLength = 160;

        /// <summary>
        /// Required. Must be "Claim".
        /// </summary>
        [JsonPropertyName("@type")]
        public string AtType = "Claim";

        /// <summary>
        /// Required. Number and position of the citation.
        /// </summary>
        public int Position { get; set; }

        /// <summary>
        /// The citation's appearance.
        /// </summary>
        public ClientCitationAppearance? Appearance { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientCitation"/> class with default values.
        /// </summary>
        public ClientCitation()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientCitation"/> class with the specified citation details.
        /// </summary>
        /// <param name="title">The title/name of the citation document. Will be trimmed to 80 characters if longer. Can be automatically wrapped in an Adaptive Card format.</param>
        /// <param name="position">The position number of the citation, used for referencing in text (e.g., [1], [2]).</param>
        /// <param name="abstractText">Extract of the referenced content. Will be trimmed to 160 characters if longer.</param>
        /// <param name="text">The detailed citation appearance text content.</param>
        /// <param name="keywords">Optional keywords associated with the citation for categorization and search.</param>
        /// <param name="citationLink">The URL of the source document. This will make the citation clickable and direct users to the specified URL. Invalid URLs will be ignored.</param>
        /// <param name="imageName">Optional icon name to display with the citation. Will create an <see cref="AppearanceImage"/> if provided.</param>
        /// <param name="useDefaultAdaptiveCard">If true and title is provided, wraps the title in a default Adaptive Card JSON format. Default is true.</param>
        /// <remarks>
        /// This constructor creates a complete citation with appearance information. It performs several validations and transformations:
        /// <list type="bullet">
        /// <item><description>Title is trimmed to 80 characters maximum to comply with citation display requirements</description></item>
        /// <item><description>Title can be automatically wrapped in Adaptive Card JSON format for rich display</description></item>
        /// <item><description>URL validation is performed, and invalid URLs are ignored with warning traces</description></item>
        /// <item><description>Abstract text is trimmed to 160 characters maximum for proper display sizing</description></item>
        /// <item><description>Warning traces are logged when content is trimmed or URLs are invalid</description></item>
        /// <item><description>The Position property is automatically set from the position parameter</description></item>
        /// <item><description>A <see cref="ClientCitationAppearance"/> object is automatically created and populated</description></item>
        /// </list>
        /// The resulting citation can be referenced in activity text using the format [position] (e.g., [1], [2]).
        /// </remarks>
        public ClientCitation(int position, string title, string abstractText, string text, IList<string>? keywords, string? citationLink, ClientCitationsIconNameEnum? imageName, bool useDefaultAdaptiveCard = true)
        {
            Position = position;
            
            if (!string.IsNullOrEmpty(title) && title.Length > MaxTitleLength)
            {
                // trim title to 80 characters
                title = title.Substring(0, MaxTitleLength);
                System.Diagnostics.Trace.TraceWarning($"The citation title was trimmed to {MaxTitleLength} characters.");
            }
            if (!string.IsNullOrEmpty(text) && useDefaultAdaptiveCard)
            {
                // Check the text value to see if it is already in the adaptive card format
                if (text.StartsWith("{\"type\":\"AdaptiveCard\""))
                {
                    useDefaultAdaptiveCard = false; // already in adaptive card format
                }
                else
                {
                    // Wrap the text in a default adaptive card format
                    var card = new JsonObject
                    {
                        ["type"] = "AdaptiveCard",
                        ["$schema"] = "http://adaptivecards.io/schemas/adaptive-card.json",
                        ["version"] = "1.6",
                        ["body"] = new JsonArray(
                                               new JsonObject
                                               {
                                                   ["type"] = "TextBlock",
                                                   ["wrap"] = true,
                                                   ["text"] = text.Trim()
                                               })
                    };
                    text = card.ToJsonString();
                }
            }
            if (citationLink != null)
            {
                if (!Uri.IsWellFormedUriString(citationLink, UriKind.RelativeOrAbsolute))
                {
                    System.Diagnostics.Trace.TraceWarning("The citation URL is not well formed. It will be ignored.");
                    citationLink = null; // ignore invalid URL
                }
            }
            if (!string.IsNullOrEmpty(abstractText) && abstractText.Length > MaxAbstractTextLength)
            {
                abstractText = abstractText.Substring(0, MaxAbstractTextLength);
                System.Diagnostics.Trace.TraceWarning($"The citation abstract was trimmed to {MaxAbstractTextLength} characters.");
            }
            Appearance = new ClientCitationAppearance()
            {
                EncodingFormat = useDefaultAdaptiveCard ? "application/vnd.microsoft.card.adaptive" : null,
                Name = title,
                Url = citationLink,
                Abstract = abstractText,
                Text = text,
                Keywords = keywords
            };
            if (imageName != null)
            {
                Appearance.Image = new AppearanceImage
                {
                    Name = imageName.Value
                };
            }

        }
    }

    /// <summary>
    /// The client citation appearance.
    /// </summary>
    public class ClientCitationAppearance
    {
        /// <summary>
        /// Required. Must be "DigitalDocument"
        /// </summary>
        [JsonPropertyName("@type")]
        public string AtType = "DigitalDocument";

        /// <summary>
        /// Name of the document (max length 80).
        /// </summary>
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Optional. The citation appearance text.
        /// </summary>
        public string? Text { get; set; }

        /// <summary>
        /// URL of the document. This will make the name of the citation clickable and direct the user to the specified URL.
        /// </summary>
        public string? Url { get; set; }

        /// <summary>
        /// Extract of the referenced content (max length 160).
        /// </summary>
        public string Abstract { get; set; }

        /// <summary>
        /// Optional. Encoding format of the `citation.appearance.text` field. 
        /// It should be one of "text/html" or "application/vnd.microsoft.card.adaptive".
        /// </summary>
        public string? EncodingFormat { get; set; } 

        /// <summary>
        /// The icon provided in the citation ui.
        /// </summary>
        public AppearanceImage? Image { get; set; }

        /// <summary>
        /// Optional. Set the keywords.
        /// </summary>
        public IList<string>? Keywords { get; set; }

        /// <summary>
        /// Optional sensitivity content information.
        /// </summary>
        public SensitivityUsageInfo? UsageInfo { get; set; }
    }

    /// <summary>
    /// The sensitivity usage info.
    /// </summary>
    public class SensitivityUsageInfo
    {
        /// <summary>
        /// Must be "https://schema.org/Message"
        /// </summary>
        public string Type = "https://schema.org/Message";

        /// <summary>
        /// Required. Set to "CreativeWork".
        /// </summary>
        [JsonPropertyName("@type")]
        public string AtType = "CreativeWork";

        /// <summary>
        /// Sensitivity description of the content.
        /// </summary>
        public string? Description { get; set; }

        /// <summary>
        /// Sensitivity title of the content.
        /// </summary>
        public string? Name { get; set; }

        /// <summary>
        /// Optional. Ignored in Teams
        /// </summary>
        public int Position { get; set; }

        /// <summary>
        /// The sensitivity usage info pattern.
        /// </summary>
        public SensitivityUsageInfoPattern? Pattern;
    }

    /// <summary>
    /// The sensitivity usage info pattern.
    /// </summary>
    public class SensitivityUsageInfoPattern
    {
        /// <summary>
        /// Set to "DefinedTerm".
        /// </summary>
        [JsonPropertyName("@type")]
        public string AtType = "DefinedTerm";

        /// <summary>
        /// Whether it's in a defined term set.
        /// </summary>
        public string? inDefinedTermSet { get; set; }

        /// <summary>
        /// The color.
        /// </summary>
        public string? Name { get; set; }

        /// <summary>
        /// For example `#454545`.
        /// </summary>
        public string? TermCode { get; set; }
    }

    /// <summary>
    /// Represents how the citation will be rendered.
    /// </summary>
    public class AppearanceImage
    {
        /// <summary>
        /// Required. Must be "ImageObject".
        /// </summary>
        public string Type { get; set; } = "ImageObject";

        /// <summary>
        /// The image/icon name. It should be one of <see cref="ClientCitationIconName"/>
        /// </summary>
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public ClientCitationsIconNameEnum Name { get; set; }

    }

    /// <summary>
    /// Represents the different possible values for the client citation icon name.
    /// </summary>
    public static class ClientCitationIconName
    {
        /// <summary>
        /// Represents the Microsoft Word icon name.
        /// </summary>
        public static readonly string MicrosoftWord = "Microsoft Word";

        /// <summary>
        /// Represents the Microsoft Excel icon name.
        /// </summary>
        public static readonly string MicrosoftExcel = "Microsoft Excel";

        /// <summary>
        /// Represents the Microsoft PowerPoint icon name.
        /// </summary>
        public static readonly string MicrosoftPowerPoint = "Microsoft PowerPoint";

        /// <summary>
        /// Represents the Microsoft Visio icon name.
        /// </summary>
        public static readonly string MicrosoftVisio = "Microsoft Visio";

        /// <summary>
        /// Represents the Microsoft Loop icon name.
        /// </summary>
        public static readonly string MicrosoftLoop = "Microsoft Loop";

        /// <summary>
        /// Represents the Microsoft Whiteboard icon name.
        /// </summary>
        public static readonly string MicrosoftWhiteboard = "Microsoft Whiteboard";

        /// <summary>
        /// Represents the Adobe Illustrator icon name.
        /// </summary>
        public static readonly string AdobeIllustrator = "Adobe Illustrator";

        /// <summary>
        /// Represents the Adobe Photoshop icon name.
        /// </summary>
        public static readonly string AdobePhotoshop = "Adobe Photoshop";

        /// <summary>
        /// Represents the Adobe InDesign icon name.
        /// </summary>
        public static readonly string AdobeInDesign = "Adobe InDesign";

        /// <summary>
        /// Represents the Adobe Flash icon name.
        /// </summary>
        public static readonly string AdobeFlash = "Adobe Flash";

        /// <summary>
        /// Represents the Sketch icon name.
        /// </summary>
        public static readonly string Sketch = "Sketch";

        /// <summary>
        /// Represents the Source Code icon name.
        /// </summary>
        public static readonly string SourceCode = "Source Code";

        /// <summary>
        /// Represents the Image icon name.
        /// </summary>
        public static readonly string Image = "Image";

        /// <summary>
        /// Represents the GIF icon name.
        /// </summary>
        public static readonly string GIF = "GIF";

        /// <summary>
        /// Represents the Video icon name.
        /// </summary>
        public static readonly string Video = "Video";

        /// <summary>
        /// Represents the Sound icon name.
        /// </summary>
        public static readonly string Sound = "Sound";

        /// <summary>
        /// Represents the ZIP icon name.
        /// </summary>
        public static readonly string ZIP = "ZIP";

        /// <summary>
        /// Represents the Text icon name.
        /// </summary>
        public static readonly string Text = "Text";

        /// <summary>
        /// Represents the PDF icon name.
        /// </summary>
        public static readonly string PDF = "PDF";
    }

    /// <summary>
    /// Represents the different possible values for the client citation icon name as an enum.
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ClientCitationsIconNameEnum
    {
        /// <summary>
        /// Represents the Microsoft Word icon name.
        /// </summary>
        [EnumMember(Value = "Microsoft Word")]
        MicrosoftWord,

        /// <summary>
        /// Represents the Microsoft Excel icon name.
        /// </summary>
        [EnumMember(Value = "Microsoft Excel")]
        MicrosoftExcel,

        /// <summary>
        /// Represents the Microsoft PowerPoint icon name.
        /// </summary>
        [EnumMember(Value = "Microsoft PowerPoint")]
        MicrosoftPowerPoint,

        /// <summary>
        /// Represents the Microsoft Visio icon name.
        /// </summary>
        [EnumMember(Value = "Microsoft Visio")]
        MicrosoftVisio,

        /// <summary>
        /// Represents the Microsoft Loop icon name.
        /// </summary>
        [EnumMember(Value = "Microsoft Loop")]
        MicrosoftLoop,

        /// <summary>
        /// Represents the Microsoft Whiteboard icon name.
        /// </summary>
        [EnumMember(Value = "Microsoft Whiteboard")]
        MicrosoftWhiteboard,

        /// <summary>
        /// Represents the Adobe Illustrator icon name.
        /// </summary>
        [EnumMember(Value = "Adobe Illustrator")]
        AdobeIllustrator,

        /// <summary>
        /// Represents the Adobe Photoshop icon name.
        /// </summary>
        [EnumMember(Value = "Adobe Photoshop")]
        AdobePhotoshop,

        /// <summary>
        /// Represents the Adobe InDesign icon name.
        /// </summary>
        [EnumMember(Value = "Adobe InDesign")]
        AdobeInDesign,

        /// <summary>
        /// Represents the Adobe Flash icon name.
        /// </summary>
        [EnumMember(Value = "Adobe Flash")]
        AdobeFlash,

        /// <summary>
        /// Represents the Sketch icon name.
        /// </summary>
        [EnumMember(Value = "Sketch")]
        Sketch,

        /// <summary>
        /// Represents the Source Code icon name.
        /// </summary>
        [EnumMember(Value = "Source Code")]
        SourceCode,

        /// <summary>
        /// Represents the Image icon name.
        /// </summary>
        [EnumMember(Value = "Image")]
        Image,

        /// <summary>
        /// Represents the GIF icon name.
        /// </summary>
        [EnumMember(Value = "GIF")]
        GIF,

        /// <summary>
        /// Represents the Video icon name.
        /// </summary>
        [EnumMember(Value = "Video")]
        Video,

        /// <summary>
        /// Represents the Sound icon name.
        /// </summary>
        [EnumMember(Value = "Sound")]
        Sound,

        /// <summary>
        /// Represents the ZIP icon name.
        /// </summary>
        [EnumMember(Value = "ZIP")]
        ZIP,

        /// <summary>
        /// Represents the Text icon name.
        /// </summary>
        [EnumMember(Value = "Text")]
        Text,

        /// <summary>
        /// Represents the PDF icon name.
        /// </summary>
        [EnumMember(Value = "PDF")]
        PDF
    }
}
