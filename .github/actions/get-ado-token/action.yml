name: Get Azure DevOps Access Token
description: Get an access token to authenticate with Azure DevOps
inputs:
  client-id:
    description: "The client ID of the application calling Azure DevOps"
    required: true
  tenant-id:
    description: "The tenant ID of the application calling Azure DevOps"
    required: true
  organization:
    description: "The Azure DevOps organization to authenticate with"
    required: true
outputs:
  token:
    description: "The access token to authenticate with Azure DevOps"
    value: ${{ steps.ADOAuth.outputs.token }}

runs:
  using: "composite"
  steps:
    - name: OIDC Login with AzPowershell
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.client-id }}
        tenant-id: ${{ inputs.tenant-id }}
        allow-no-subscriptions: true
        enable-AzPSSession: true
    - id: ADOAuth
      name: Get ADO Access Token
      uses: azure/powershell@v1
      with:
        azPSVersion: "latest"
        inlineScript: |
          function Parse-JWTtoken {
          
              [cmdletbinding()]
              param([Parameter(Mandatory=$true)][string]$token)
          
              #Payload
              $tokenPayload = $token.Split(".")[1].Replace('-', '+').Replace('_', '/')
              #Fix padding as needed, keep adding "=" until string length modulus 4 reaches 0
              while ($tokenPayload.Length % 4) { Write-Verbose "Invalid length for a Base-64 char array or string, adding ="; $tokenPayload += "=" }
              Write-Verbose "Base64 encoded (padded) payoad:"
              Write-Verbose $tokenPayload
              #Convert to Byte array
              $tokenByteArray = [System.Convert]::FromBase64String($tokenPayload)
              #Convert to string array
              $tokenArray = [System.Text.Encoding]::ASCII.GetString($tokenByteArray)
              Write-Verbose "Decoded array in JSON format:"
              Write-Verbose $tokenArray
              #Convert from JSON to PSObject
              $tokobj = $tokenArray | ConvertFrom-Json
              Write-Verbose "Decoded Payload:"
              
              return $tokobj
          }

          function decodeToken([string]$token) { 
            $t = $token.split('.')[1]
            while($t.Length % 4 -ne 0) { $t += '=' } 
            ConvertFrom-Json ([System.Text.Encoding]::Ascii.GetString([System.Convert]::FromBase64String($t)))
          }

          $accessToken = az account get-access-token --resource="https://${{inputs.organization}}.visualstudio.com" --query accessToken
          decodeToken($accessToken)
          "token=$accessToken" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

        #  $accessToken = (Get-AzAccessToken -ResourceUrl "https://${{inputs.organization}}.visualstudio.com").Token
        #  "token=$accessToken" | Out-File -FilePath $env:GITHUB_OUTPUT -Append